Script started on 2020-03-12 21:14:59-0400
]0;sp46@gold16: ~/214/labs/06[01;32msp46@gold16[00m:[01;34m~/214/labs/06[00m$ cat Average.java
/* Average.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 *
 * Student Name: Sinai Park(sp46)
 * Date: March 12 2020
 *
 * Precondition: theArray, is an array of double values.
 * Output: the average of the numbers in theArray.
 ***************************************************************/

import java.io.*;

public class Average
{
  public static void main(String[] args) {

      //declaring array0 and array1
      double[] array0 = null;
      double[] array1 = new double[]{9.0, 8.0, 7.0, 6.0};


      // output the average of the values in the arrays
      System.out.println("The first average is " + avg(array0));
      System.out.println("The second average is " + avg(array1));
  }
  

  /* sum() is a method that computes the sum of all the values
   * in an array of doubles.
   * Receive: anArray, an array of doubles.
   * Return: the sum of the values in anArray.
   ************************************************************/
  public static double sum(double[] theArray)
  {
    //resulting sum
    double total = 0.0;
    for (int i = 0; i < theArray.length; i++){
      total += theArray[i];
    }
    return total;
  }

  /* avg() is a method that computes the average of the values
   * in an array.
   * Receive: anArray, an array of doubles.
   * Return: the average of the values in anArray.
   **************************************************************/
  public static double avg(double anArray[])
  {
    if (anArray == null || anArray.length <= 0)   //check if array is null
      return 0.0;
    else 
      return sum(anArray) / anArray.length;   //divide the sum by the number of things in the array
  }
}

]0;sp46@gold16: ~/214/labs/06[01;32msp46@gold16[00m:[01;34m~/214/labs/06[00m$ cat Average.java[4Pjava Averagecat Average.java[Kjavac -deprecation Average.java
]0;sp46@gold16: ~/214/labs/06[01;32msp46@gold16[00m:[01;34m~/214/labs/06[00m$ java Average
The first average is 0.0
The second average is 7.5
]0;sp46@gold16: ~/214/labs/06[01;32msp46@gold16[00m:[01;34m~/214/labs/06[00m$ exit

Script done on 2020-03-12 21:15:41-0400
Script started on 2020-03-16 23:37:26-0400
]0;sp46@maroon34: ~/214/labs/06[01;32msp46@maroon34[00m:[01;34m~/214/labs/06[00m$ cat average.adbls[Kcd 214/labs/06ls[Kcat average.adb[Kgnat  make average.adb
gnatmake: "average" up to date.
]0;sp46@maroon34: ~/214/labs/06[01;32msp46@maroon34[00m:[01;34m~/214/labs/06[00m$ cat averab ge.adb
-- average.adb "test-drives" function Average.
-- Precondition: theArray is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sinai Park(sp46)
-- Date: March 12 2020
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is

-- Declare Vector type
   type Vector is array ( Positive range <>) of Float;

-- Define array0 as an array containing no values
   array0 : Vector := (0.0, 0.0);

-- Define array1 as an array containing 9, 8, 7, 6
   array1 : Vector := (9.0, 8.0, 7.0, 6.0); 

----------------------------------------------
-- sum() sums the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the sum of the values in anArray. -
----------------------------------------------

-- Replace this line with definition of sum()
function sum(anArray: Vector) return Float is
   Total: Float := 0.0;
   begin
   for I in Integer range anArray'First ..anArray'Last 
   loop
      Total := Total + anArray(I);
   end loop;
   return Total;
end sum;

-----------------------------s-----------------
-- average() computes averages of the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the average of the values in anArray. -
----------------------------------------------

-- Replace this line with documentation and definition of average()
function average(anArray: Vector) return Float is
   begin
      --check to see if the array is empty, then return 0
      if anArray'length = 0 then
         return 0.0;
      else 
         --divide the sum of array by the length of the given array
         return sum(anArray) / Float(anArray'length);   
      end if;
end average;

begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;

]0;sp46@maroon34: ~/214/labs/06[01;32msp46@maroon34[00m:[01;34m~/214/labs/06[00m$ ./average
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
]0;sp46@maroon34: ~/214/labs/06[01;32msp46@maroon34[00m:[01;34m~/214/labs/06[00m$ exit

Script done on 2020-03-16 23:37:52-0400
Script started on 2020-03-17 00:39:54-0400
]0;sp46@maroon30: ~/214/labs/06/clojure[01;32msp46@maroon30[00m:[01;34m~/214/labs/06/clojure[00m$ cd   src
]0;sp46@maroon30: ~/214/labs/06/clojure/src[01;32msp46@maroon30[00m:[01;34m~/214/labs/06/clojure/src[00m$ a cat average.clj
;; average.clj "test-drives" function average().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m average
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Sinai Park(sp46)
;; Date: March 16 2020 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns average)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum() sums the values in a vector.       
;; Receive: aVec, a vector of numbers.
;; Return: the sum of the values in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Replace this line with the definition of sum(); harder (recursive solution)
(defn sum [aVec]
  (if (vector? aVec)          ;if aVec is a vector
    (if (empty? aVec)         ; if aVec is empty;
      0.0                     ; return 0
      (+ (peek aVec)          ;else peek the last value
      (sum (pop aVec))        ;sum all the digits except the last value
      ) 
    )
  )
)


;; Replace this line with the definition of sum2(); easier way of summing up values
(defn sum2 [aVec]
  (if (vector? aVec)
    (if (empty? aVec)
      0.0
        (reduce + aVec)         ;reduce returns the result of the combined value using operator 
    )
  )
) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; average() computes the average of a vector of numbers.
;; Receive: aVec, a vector of numbers. 
;; Return: the average of the numbers in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
;; Replace this line with the definition of average()
(defn average [aVec]
  (if (empty? aVec)
     0.0
  (/ (sum aVec) (count aVec))     ;divide the sum of the values in the array by the count of the vector 
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ emptyVec []
      testVec  [9.0 8.0 7.0 6.0]
    ]

    (print "\nThe empty vec: " emptyVec) 
    (print "\nThe test  vec: " testVec) 
    (println "\n")

    ;; Test sum()...
    (printf "\nThe first sum is %.3f\n" (sum emptyVec))
    (printf "The second sum is %.3f\n" (sum testVec))

    ;; Test average()...
    (printf "\nThe first average is %.3f\n" (average emptyVec))
    (printf "The second average is %.3f\n" (average testVec))
    (println "\n")

    ;; Test sum2()...
    (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
    (printf "The second sum2 is %.3f\n" (sum2 testVec))
    (println "\n")
  )
)

]0;sp46@maroon30: ~/214/labs/06/clojure/src[01;32msp46@maroon30[00m:[01;34m~/214/labs/06/clojure/src[00m$ cd -
/home/sp46/214/labs/06/clojure
]0;sp46@maroon30: ~/214/labs/06/clojure[01;32msp46@maroon30[00m:[01;34m~/214/labs/06/clojure[00m$ clojure -m average

The empty vec:  []
The test  vec:  [9.0 8.0 7.0 6.0]


The first sum is 0.000
The second sum is 30.000

The first average is 0.000
The second average is 7.500



The first sum2 is 0.000
The second sum2 is 30.000


]0;sp46@maroon30: ~/214/labs/06/clojure[01;32msp46@maroon30[00m:[01;34m~/214/labs/06/clojure[00m$ exit

Script done on 2020-03-17 00:41:00-0400
Script started on 2020-03-17 01:58:47-0400
cat ]0;sp46@maroon30: ~/214/labs/06[01;32msp46@maroon30[00m:[01;34m~/214/labs/06[00m$ cat     cat script      averag.e   e.r   ge.rb
# average.rb averages the values of an array of doubles.
# Precondition: theArray is an array of numbers
# Output: the average of the values in theArray
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:: Sinai Park(sp46)
# Date: March 16 2020
########################################################

###############################################
# sum() sums the values in an array
# Receive: anArray, an array of numbers
# Return: the sum of the values in anArray.
################################################

# Define sum() method here
def sum(anArray)
   total = 0.0
   #use the array each method to add up the numbers
   anArray.each { |x| total = x + total}
   #return the value of the sum
   return total
end

# Document and define average() method here
def average(anArray)
   if (anArray.size <= 0)
      0.0;
   else
      return sum(anArray) / anArray.size
   end
end 

def main
   # Define array0 as an Array containing no values
   array0 = []
   # Define array1 as an Array containing 9.0, 8.0, 7.0, 6.0
   array1 = [9.0, 8.0, 7.0, 6.0]

   puts "sum 0 is: #{ sum(array0) }\n"
   puts "sum 1 is: #{ sum(array1) }\n"

   puts "average 0 is: #{ average(array0) }\n"
   puts "average 1 is: #{ average(array1) }\n"
end

main]0;sp46@maroon30: ~/214/labs/06[01;32msp46@maroon30[00m:[01;34m~/214/labs/06[00m$ ruby average.cat   rb
sum 0 is: 0.0
sum 1 is: 30.0
average 0 is: 0.0
average 1 is: 7.5
]0;sp46@maroon30: ~/214/labs/06[01;32msp46@maroon30[00m:[01;34m~/214/labs/06[00m$ exit

Script done on 2020-03-17 01:59:11-0400
