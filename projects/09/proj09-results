Script started on 2020-04-19 06:28:51-0400
]0;sp46@gold06: ~/214/projects/09/java[01;32msp46@gold06[00m:[01;34m~/214/projects/09/java[00m$ java Maxc -deprecation Max.java
]0;sp46@gold06: ~/214/projects/09/java[01;32msp46@gold06[00m:[01;34m~/214/projects/09/java[00m$ javac -deprecation Max.java Max[K
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
The max value of list1 is: 99
The max value of list2 is: 99
The max value of list3 is: 99
The index of 99 is at 0
The index of 99 is at 4
The index of 99 is at 2
The index of 99 is at -1
]0;sp46@gold06: ~/214/projects/09/java[01;32msp46@gold06[00m:[01;34m~/214/projects/09/java[00m$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Sinai Park(sp46)
 * Date: April 17 2020 
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {               

  public static void main(String [] args) {
    // define list1, list2, list3 here ...

  LinkedList<Integer> list1 = new LinkedList<Integer>();      
  LinkedList<Integer> list2 = new LinkedList<Integer>();      
  LinkedList<Integer> list3 = new LinkedList<Integer>();  

    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);

    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);  
  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);  
  
    print(list1); 
    print(list2); 
    print(list3);

   System.out.println("The max value of list1 is: " + Collections.max(list1));
   System.out.println("The max value of list2 is: " + Collections.max(list2));
   System.out.println("The max value of list3 is: " + Collections.max(list3));

   System.out.println("The index of 99 is at " + search(list1, 99) );
   System.out.println("The index of 99 is at " + search(list2, 99) );
   System.out.println("The index of 99 is at " + search(list3, 99) );
   
   LinkedList<Integer> list4 = new LinkedList<Integer>();  

    list4.add(00);    // 00, 88, 77, 66, 55
    list4.add(88);    // 99 not in list
    list4.add(77);
    list4.add(66);  
    list4.add(55);
    System.out.println("The index of 99 is at " + search(list4, 99) );
  }

  /** print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the Integer values in aList
   *                 have been displayed to System.out,
   *                 separated by spaces.
   */
    //function print takes a list and prints out all the values within that list
    public static void print(LinkedList<Integer> aList){
      Iterator<Integer> listIterator = aList.iterator();
      while (listIterator.hasNext()) {
        System.out.print(listIterator.next() + " ");
      }
      System.out.print("\n");
    }

  /* search() searches a LinkedList for a value and returns the 
   * position of the value, -1 if otherwise 
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the System.out prints the pos of the value in list
   *                -1 if the value does not exist 
   */
    //function print takes a list and prints out all the values within that list
    public static int search(LinkedList<Integer> aList, int aValue){
      Iterator<Integer> listIterator = aList.iterator();
      int count = 0;
      while (listIterator.hasNext() ) {

        if (aList.get(count) == aValue) 
          return count;
        
        else {
          count = count + 1;
          listIterator.next();
          
        }
      }
      return -1;   
    }

}

]0;sp46@gold06: ~/214/projects/09/java[01;32msp46@gold06[00m:[01;34m~/214/projects/09/java[00m$ mv    exit

Script done on 2020-04-19 06:29:50-0400
Script started on 2020-04-19 08:28:48-0400
]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ gnatmake list_package
]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ gnatmake max
gnatmake: "max" up to date.
]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ ./max
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The index of value in list 1 is           0
The index of value in list 2 is           4
The index of value in list 3 is           2
The index of value in list 4 is          -1
]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ cat list_packae ge.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List) is
    Temp_Ptr : Node_Ptr :=  A_List.Its_First;
  begin
    while Temp_Ptr /= null loop
      Put(' '); Put(Temp_Ptr.Its_Value);
      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;
  end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List: in List) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Max_Value : Integer := -99999;
  begin
    while Temp_Ptr /= null loop
      if Temp_Ptr.Its_Value > Max_Value then
        Max_Value := Temp_Ptr.Its_Value;
      end if;
      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;
    return Max_Value;
  end Max;

  ---------------------------------------
  -- Finds the value in a list to return index.  -
  -- Receive: aList, a List, aValue, an int          -
  -- Return: the index of value in aList.
  --          -1, if the value does not exist-
  ---------------------------------------

  function Search( A_List: in List; A_Value: in Integer) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Count : Integer := 0;

  begin
    while Temp_Ptr /= null loop
      if Temp_Ptr.Its_Value = A_Value then
        return Count;
      else
        Count := Count + 1;
        Temp_Ptr := Temp_Ptr.Its_Next;
        
      end if;
      
    end loop;
    return -1;
  end Search;

end List_Package;

]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ cat max.adb
-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sinai Park (sp46)
-- Date: April 17 2020
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3, List4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 

  Put("The index of value in list 1 is ");  
  Put( Search(List1, 99) ); 
  New_Line; 
  Put("The index of value in list 2 is "); 
  Put( Search(List2, 99) );
  New_Line; 
  Put("The index of value in list 3 is ");
  Put( Search(List3, 99) );
  New_Line; 

  Init(List4); 
 
  Append(00, List4);          -- 99, 88, 77, 66, 55 
  Append(88, List4);          -- max is first 
  Append(77, List4); 
  Append(66, List4); 
  Append(55, List4); 

  Put("The index of value in list 4 is ");
  Put( Search(List4, 99) );
  New_Line; 

  --Node_Ptr;
  --The compiler throws an error saying that the code is a non-visible (private)
  --part of declartion 
 
end Max; 

]0;sp46@gold06: ~/214/projects/09/ada[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ada[00m$ exit

Script done on 2020-04-19 08:29:25-0400
Script started on 2020-04-24 02:43:57-0400
]0;sp46@gold06: ~/214/projects/09/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/09/clojure[00m$ clojure -m clos jure
Execution error (FileNotFoundException) at clojure.main/main (main.java:40).
Could not locate clojure__init.class, clojure.clj or clojure.cljc on classpath.

Full report at:
/tmp/clojure-12427680095287071847.edn
]0;sp46@gold06: ~/214/projects/09/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/09/clojure[00m$ clojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

The index of 99 in list1 is:  0
The index of 99 in list2 is:  4
The index of 99 in list3 is:  2
The index of 99 in list4 is:  -1
]0;sp46@gold06: ~/214/projects/09/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/09/clojure[00m$ cat src/listOps.clj src/max.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: Sinai Park (sp46)
;; Date: April 17 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax [aList]
  
  (if (list? aList)
    (if (empty? aList) nil
    (if (= 1 (count aList))
        (first aList)
        (maxOf2 (first aList) (listMax (rest aList)))
    )
    )
  nil
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listSearch() finds the index of value in a list.
;; Receive: aList, a list of values and aValue, an integer  
;; PRE: aList is a list 
;;      values in aList can be compared using =.
;; Return: the index value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listSearch [aList aValue count]
  (if (list? aList)
    (if (empty? aList) -1
      (if (= (first aList) aValue) count
        (listSearch (rest aList) aValue (+ count 1))
      )
    )
  nil
  )
)
    

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax2() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax2 [aList]
  (if (list? aList) 
    (if (empty? aList)
      nil
        (apply max aList)      
    )  
  ) 
)

;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by:Sinai Park (sp46)
;; Date:April 17 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      list4 (list 55 66 77 88 00)     ; 99 is not in list
      emptyList '()                  ; list is empty
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)

    (println "The max value in list1 is: " (listMax2 list1))
    (println "The max value in list2 is: " (listMax2 list2))
    (println "The max value in list3 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list is: " (listMax2 emptyList))
    (println)
    (println "The index of 99 in list1 is: " (listSearch list1 99 0))
    (println "The index of 99 in list2 is: " (listSearch list2 99 0))
    (println "The index of 99 in list3 is: " (listSearch list3 99 0))
    (println "The index of 99 in list4 is: " (listSearch list4 99 0))
  )
)

]0;sp46@gold06: ~/214/projects/09/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/09/clojure[00m$ exit

Script done on 2020-04-24 02:44:26-0400
Script started on 2020-04-19 09:35:28-0400
]0;sp46@gold06: ~/214/projects/09/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ruby[00m$ ruby max.rb[1@List.rb
]0;sp46@gold06: ~/214/projects/09/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ruby[00m$ ruby List.rb[1Pmax.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
 99 88 77 66 55
Index value of 99 in list1: 0

Index value of 99 in list2: 4

Index value of 99 in list3: 2

Index value of 99 in list4: -1
]0;sp46@gold06: ~/214/projects/09/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ruby[00m$ cat List.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sinai Park (sp46)
# Date: April 17 2020
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List


   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0

   def initialize
      @first = nil
      @last = nil
      @length = 0
   end
      # create reader method for length
      attr_reader :length


   # Replace this line with a declaration for class Node
   #  (and its methods)
   #creating a list of linked nodes
   class Node
      def initialize (item, link)
         @value = item
         @next = link
      end
      attr_reader :value
      attr_accessor :next
   end


   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print()
      temp = @first
      while !temp.nil?
         printf " #{temp.value}"
         temp = temp.next
      end
   end 

   # find my maximum item
   # Return: my maximum item

  def max
   temp = @first
   maxValue = -99999

   while !temp.nil?
      if temp.value > maxValue then
         maxValue = temp.value 
      end  
      temp = temp.next
   end 
    return maxValue
end

   # search for value in list
   # Return: the index of value in list, -1 if not found

   def search(searchvalue)
      temp = @first
      indexValue = 0
         
      while !temp.nil?
         if temp.value == searchvalue then
            return indexValue
         else  
            indexValue += 1
            temp = temp.next
         end
      end 
      return -1
   end




end

]0;sp46@gold06: ~/214/projects/09/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ruby[00m$ cat max.rb
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by:  Sinai Park (sp46)
# Date: April 17 2020

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new 

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(00).append(88).append(77).append(66).append(55)


list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

list1.print 
puts
puts "Index value of 99 in list1: #{list1.search(99)}"

puts
puts "Index value of 99 in list2: #{list2.search(99)}"

puts
puts "Index value of 99 in list3: #{list3.search(99)}"

puts
puts "Index value of 99 in list4: #{list4.search(99)}"

]0;sp46@gold06: ~/214/projects/09/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/09/ruby[00m$ exit

Script done on 2020-04-19 09:35:43-0400
