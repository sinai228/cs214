Script started on 2020-04-16 02:48:04-0400
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ cd src
]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ ls
Temp.clj  tempTester.clj
]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cat Temp.clj
;; Temp.clj is a module for our 'Temp' type-abstraction.
;;
;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;; Completed by: Sinai Park (sp46)
;; Date: April 15 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create a record/struct type named Temp
(defrecord Temp [degree, scale])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-Temp constructs a Temp object from 
;; degree, a string and scale, a char 
;; Receive: degree and scale
;; Return: the Temp (degree and scale). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Temp [degree scale]
  (->Temp degree scale)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getDegrees extracts the degrees of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees double in aTemp.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getDegree [aTemp]
  (:degree aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getScale extracts the scale of a temp object.
;; Receive: aTemp, a Temp
;; Return: the scale char in aTemp.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScale [aTemp]
  (:scale aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toFarenheit extracts the degrees of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees in Fahrenheit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toFahrenheit [aTemp]
  (if (or (=(:scale aTemp) "C") (=(:scale aTemp) "c"))
    (do
      (let [degree_val (+ ( * (:degree aTemp) (/ 9.0 5.0)) 32.0) ]
      (let [scale_char ("F")]
      (->Temp degree_val scale_char)
  (if (or (=(:scale aTemp) "K") (=(:scale aTemp) "k"))
    (do
      (let [degree_val (- ( * (getDegree aTemp) (/ 9.0 5.0)) 459.67) ]
      (let [scale_char ("F")]
      (->Temp degree_val scale_char)))))))))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toCelcius extracts the scale of a temp object.
;; Receive: aTemp, a Temp. 
;; Return: the degrees in Celsius
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toCelsius [aTemp]
  (:scales aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toKelvin extracts the scale of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees in Kelvin
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toKelvin [aTemp]
  (:scales aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readTemp() creates a temp from user input. 
;;; Receive: aTemp, a Temp 
;;; Return: none 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn readTemp[^Temp aTemp]
  (print "Please enter the degree name: ") (flush)
  (let
    [degree (read-line)]
      (print "Please enter the scale: ") (flush)
      (let
        [ scale (read-line)]
          (->Temp degree scale)
          
      )
  )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; printTemp displays a temp object. 
;; Receive: aTemp, a Temp, 
;; Output: the string representation of aTemp. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printTemp[aTemp]
  (print (getDegree aTemp) "" (getScale aTemp))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() changes the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the changed firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn raise[aTemp add_degree]
  (->Temp (+ (:degree aTemp) add_degree) (:scale aTemp) )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() changes the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn lower[aTemp sub_degree]
  (->Temp (- (:degree aTemp) sub_degree) (:scale aTemp) )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() changes the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn equals[aTemp comp_temp]
  (:degree aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; less_than() returns a full name in L-F-M order. 
;;; Receive: aName, a Name. 
;;; Return: lastName, firstName, middleName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn less_than[aTemp comp_temp]
  (:degree aTemp)
)]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cat TempTester.clj                  cat tempTester.clj
;;;; tempTester.clj tests a clojure Temp type.
;;;;
;;;; Output: results of testing Temp functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Sinai Park (sp46)
;;;; Date: April 1 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns tempTester)   ; program name

(load "Temp")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Temp functions. 
;;; Output: the result of testing our Temp functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
       start_temp (make-Temp 30.0 "F")  ; -using our "make-" constructor
       limit_temp (->Temp 30.0 "F" ) ; -invoking constructor directly                                                   
       name3 (map->Temp {:degrees 30.0 :scale "Jinx"}) ; -mapping field-names to values; 
    ]
    (printTemp start_temp) (println)
    (println "Starting Temperature ")
    (let 
      [start_temp (readTemp start_temp)]
    (println "Limiting Temperature ") 
    (let 
      [limit_temp (readTemp limit_temp)]
    (println "Enter the increment number: ") 
    (let 
      [increment (read)]


      ;First print out the Fahrenheit degrees
      (toFahrenheit start_temp)
      (printTemp start_temp)
      (print "\t")
  
      ;Second print out the Celsius degrees
      (toCelsius start_temp)
      (printTemp start_temp)
      (print "\t")
  
      ;Third print out the Kelvin degrees
      (toKelvin start_temp)
      (printTemp start_temp)
      (println "")

    ))) ;three let definitions
    (println "\nAll tests passed!")

  )
)

]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cd -
/home/sp46/214/projects/08/clojure
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ clojure -m tempTester
30.0  F
Starting Temperature 
Please enter the degree name: 0
Please enter the scale: f
Limiting Temperature 
Please enter the degree name: 100
Please enter the scale: c
Enter the increment number: 
2.5
0  f	0  f	0  f

All tests passed!
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ exit

Script done on 2020-04-16 02:48:50-0400
