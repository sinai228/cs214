Script started on 2020-04-14 05:28:35-0400
]0;sp46@gold09: ~/214/projects/08/java[01;32msp46@gold09[00m:[01;34m~/214/projects/08/java[00m$ cat name    Temp.java
/* Temp.java implements class Temperature.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Sinai Park(sp46)
 * Date: April 10 2020
 ************************************************************/


import java.io.*;
import java.util.Scanner;

class Temp
   {

      private double degrees;
      private char   scales;              

     /***************************************************
     * Temp constructs a name from three strings.      *
     * Receive: first, middle and last, three strings. *
     * Return: the triplet (first middle last).        *
     ***************************************************/
      public Temp(double degrees, char scale)
      {
        degrees = degrees;
        scales = scale;
      }
      //getDegrees() returns the degree value of the Temp object          
      public double getDegrees()
      {
         return degrees;
      }
      //getScale() returns the scale value of the Temp object
      public char getScale()
      {
         return scales;
      }

      //function toFarenheit() to return the temp to f
      public void toFarenheit() 
      {
      if (scales == 'c' || scales == 'C'){
	 degrees = (getDegrees() * 9.0/5.0) + 32.0;
	 scales = 'F';}
      else if (scales == 'K' || scales == 'k'){
	 degrees = (getDegrees() - 273.15) * (9.0/5.0) + 32.0;
	 scales = 'F';}
	}
     
      //function toCelcius() to return the temp to c
      public void toCelcius() 
      {
      if (scales == 'K' || scales == 'k')
         {
	 degrees = getDegrees() - 273.15;
         scales = 'C';
	 }
      else if (scales == 'f' || scales == 'F')
         {
	 degrees = (getDegrees() - 32.0) * (5.0/9.0);
         scales = 'C';
	 }
	}

      //function toKelvin() to return the temp to k
      public void toKelvin() 
      {
      if (scales == 'c' || scales == 'C'){
	 degrees = getDegrees() + 273.15;
	 scales = 'K';}
      else if (scales == 'F' || scales == 'f'){
	 degrees = ( getDegrees() - 32 ) * (5.0/9.0) + 273.15;
	 scales = 'K';}
	}

      //function readTemp() reads in the given value of temp from the user
      public void readTemp(Scanner keyboard)
      {
	 System.out.println("Please enter the temperature value with scale: ");
	 String temp = keyboard.nextLine();
	 String[] theArray = temp.split(" ");

	String degree_val = theArray[0];
	double degree_valid = Double.parseDouble(degree_val);

	String scale_char = theArray[1];
	char scale_valid = scale_char.charAt(0);

	if ( isValid(degree_valid, scale_valid) )
		{
			degrees = degree_valid;
			scales = scale_valid;
		}
		else {
			System.out.println("Invalid temperature");
		}
      }
	//function printTemp() reads in the given value of temp from the user
      public void printTemp()
      {
	 double degree_string = getDegrees();
	 System.out.print(Double.toString(degree_string) + " " + getScale() );
	 

      }
      //raise() doubles the amount of given degrees
      public void raise(double degree) 
      {
         degrees = degrees + degree;
      }

	//lower() doubles the amount of given degrees
	public void lower(double degree)
	{
		if ( isValid(degrees - degree, scales) )
			degrees = degrees - degree;
		else
			System.out.println("New temperature is invalid!");
	}

	//function isValid takes in a degree and scale to see if it is a valid temperature
	public boolean isValid(double Degrees, char Scale)
	{
		if ( Scale == 'K' || Scale == 'k' )
		{
			if ( Degrees < 0.0 )
				return false;
			else
				return true;
		}
		else if ( Scale == 'C' || Scale == 'c' )
		{
			if ( Degrees < -237.0 )
				return false;
			else
				return true;
		}
		else if ( Scale == 'F' || Scale == 'f' )
		{
			if ( Degrees < -459.0 )
				return false;
			else
				return true;
		}
		else
			return false;
	}
	
	//function equals() checks if the two temperatures are equal regardless of scale
	public boolean equals(Temp comp) 
	{
	char my_scale = getScale();

	//set both degrees to farenheight
	toFarenheit();
	comp.toFarenheit();

	//compare the degree values
	if (comp.getDegrees() == getDegrees() )
	{
	 if (my_scale == 'C' || my_scale == 'c') { 
		toCelcius();}
	else if (my_scale == 'K' || my_scale == 'k') { 
		toKelvin();}
	return true;
	} 
	else 
		return false;
	}

	//function less_than() checks if the left temperature is less than the right temp regardless of scale
	public boolean less_than(Temp comp) 
	{
	char my_scale = getScale();
	//set both degrees to farenheight
	toFarenheit();
	comp.toFarenheit();

	if (getDegrees() < comp.getDegrees() )
		{
		if (my_scale == 'C' || my_scale == 'c') { 
			toCelcius();}
		else if (my_scale == 'K' || my_scale == 'k') { 
			toKelvin();}
		return true; 
		}
		else
			return false;
	
	}
}
]0;sp46@gold09: ~/214/projects/08/java[01;32msp46@gold09[00m:[01;34m~/214/projects/08/java[00m$ cat N TempTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Sinai Park(sp46)
 * Date: April 10 2020
 ************************************************************/


 import java.io.*;
 import java.util.Scanner;

public class TempTester  
{
  public static void main(String[] args)
   {
      Scanner keyboard = new Scanner(System.in);
      //set starting temp
      Temp start_temp = new Temp(35.6, 'F');

      // Prompt the user for the limit temp value
      System.out.println("Enter the start temp value:");
      start_temp.readTemp(keyboard);  
      //start_temp.printTemp();

      Temp limit_temp = new Temp(35.6, 'F');
      
	// Prompt the user for the limit temp value
      System.out.println("Enter the limit temp value:");
      limit_temp.readTemp(keyboard);

      // Prompt the user for the increment value
	System.out.println("Please enter the increment value: ");
	double increment = keyboard.nextDouble();

	char starting_scale = start_temp.getScale();


	// While loop to print out the temperature values in a table format in each scale
	while ( start_temp.less_than(limit_temp ) )
	{
	//in the first column print out the Fahrenheit degrees
	start_temp.toFarenheit();
	start_temp.printTemp();
	System.out.print("\t");
	
	//in the second column print out the Celsius degrees
	start_temp.toCelcius();
	start_temp.printTemp();
	System.out.print("\t");

	//in the third column print out the Kelvin degrees
	start_temp.toKelvin();
	start_temp.printTemp();
	System.out.print("\n");

	// return the starting scale back to that Scale to add inrement
	if ( starting_scale == 'F' || starting_scale == 'f' )
	{
		start_temp.toFarenheit();
	}

	if ( starting_scale == 'C' || starting_scale == 'c' )
	{
		start_temp.toCelcius();
	}

	if ( starting_scale == 'K' || starting_scale == 'k' )
	{
		start_temp.toKelvin();
	}

	// Increment the start_temp
	start_temp.raise(increment);
	}     

      //System.out.println("All tests passed!");
  }
}

]0;sp46@gold09: ~/214/projects/08/java[01;32msp46@gold09[00m:[01;34m~/214/projects/08/java[00m$ cat TempTester.java[6P.java[6@Tester.java[6P.javajava TempTester
Enter the start temp value:
Please enter the temperature value with scale: 
1 0 f
Enter the limit temp value:
Please enter the temperature value with scale: 
100 c
Please enter the increment value: 
2.5
0.0 f	-17.77777777777778 C	255.3722222222222 K
2.5000000000000107 F	-16.388888888888882 C	256.7611111111111 K
5.000000000000057 F	-14.99999999999997 C	258.15000000000003 K
7.500000000000103 F	-13.611111111111054 C	259.53888888888895 K
10.000000000000146 F	-12.222222222222141 C	260.92777777777786 K
12.500000000000192 F	-10.833333333333227 C	262.3166666666668 K
15.000000000000238 F	-9.444444444444313 C	263.7055555555557 K
17.500000000000284 F	-8.055555555555397 C	265.0944444444446 K
20.000000000000327 F	-6.666666666666486 C	266.4833333333335 K
22.500000000000377 F	-5.277777777777569 C	267.87222222222243 K
25.00000000000042 F	-3.888888888888656 C	269.26111111111135 K
27.500000000000465 F	-2.4999999999997415 C	270.65000000000026 K
30.00000000000051 F	-1.111111111110827 C	272.0388888888892 K
32.500000000000554 F	0.2777777777780857 C	273.4277777777781 K
35.000000000000604 F	1.6666666666670023 C	274.816666666667 K
37.50000000000065 F	3.055555555555915 C	276.2055555555559 K
40.000000000000696 F	4.444444444444832 C	277.59444444444483 K
42.50000000000074 F	5.833333333333744 C	278.98333333333375 K
45.00000000000078 F	7.222222222222657 C	280.37222222222266 K
47.50000000000083 F	8.611111111111573 C	281.7611111111116 K
50.000000000000874 F	10.000000000000487 C	283.1500000000005 K
52.500000000000924 F	11.388888888889403 C	284.5388888888894 K
55.000000000000966 F	12.777777777778315 C	285.9277777777783 K
57.50000000000101 F	14.166666666667227 C	287.31666666666723 K
60.00000000000106 F	15.555555555556145 C	288.70555555555615 K
62.50000000000111 F	16.94444444444506 C	290.09444444444506 K
65.00000000000115 F	18.333333333333975 C	291.483333333334 K
67.5000000000012 F	19.722222222222886 C	292.8722222222229 K
70.00000000000125 F	21.111111111111807 C	294.2611111111118 K
72.50000000000128 F	22.50000000000071 C	295.65000000000066 K
75.00000000000122 F	23.888888888889568 C	297.0388888888896 K
77.50000000000128 F	25.27777777777849 C	298.4277777777785 K
80.00000000000132 F	26.666666666667403 C	299.8166666666674 K
82.50000000000136 F	28.055555555556314 C	301.2055555555563 K
85.00000000000142 F	29.444444444445235 C	302.59444444444523 K
87.50000000000145 F	30.83333333333414 C	303.98333333333414 K
90.0000000000015 F	32.22222222222306 C	305.37222222222306 K
92.50000000000155 F	33.611111111111974 C	306.761111111112 K
95.00000000000159 F	35.00000000000089 C	308.1500000000009 K
97.50000000000165 F	36.38888888888981 C	309.5388888888898 K
100.00000000000169 F	37.77777777777872 C	310.9277777777787 K
102.50000000000173 F	39.16666666666763 C	312.31666666666763 K
105.00000000000178 F	40.555555555556545 C	313.70555555555654 K
107.50000000000182 F	41.94444444444546 C	315.09444444444546 K
110.00000000000186 F	43.333333333334366 C	316.4833333333344 K
112.50000000000192 F	44.72222222222329 C	317.8722222222233 K
115.00000000000196 F	46.1111111111122 C	319.2611111111122 K
117.500000000002 F	47.500000000001116 C	320.6500000000011 K
120.00000000000205 F	48.88888888889003 C	322.03888888889 K
122.50000000000209 F	50.277777777778944 C	323.42777777777894 K
125.00000000000215 F	51.66666666666786 C	324.81666666666786 K
127.50000000000219 F	53.05555555555677 C	326.20555555555677 K
130.00000000000222 F	54.44444444444568 C	327.5944444444457 K
132.50000000000227 F	55.8333333333346 C	328.9833333333346 K
135.00000000000233 F	57.22222222222352 C	330.3722222222235 K
137.5000000000024 F	58.61111111111244 C	331.7611111111124 K
140.00000000000242 F	60.00000000000134 C	333.15000000000134 K
142.50000000000244 F	61.38888888889025 C	334.53888888889026 K
145.0000000000025 F	62.77777777777917 C	335.92777777777917 K
147.50000000000256 F	64.16666666666809 C	337.3166666666681 K
150.00000000000261 F	65.555555555557 C	338.705555555557 K
152.50000000000264 F	66.94444444444592 C	340.0944444444459 K
155.00000000000267 F	68.33333333333482 C	341.4833333333348 K
157.50000000000273 F	69.72222222222373 C	342.87222222222374 K
160.00000000000279 F	71.11111111111266 C	344.26111111111265 K
162.5000000000028 F	72.50000000000156 C	345.65000000000157 K
165.00000000000287 F	73.88888888889049 C	347.0388888888905 K
167.50000000000293 F	75.2777777777794 C	348.4277777777794 K
170.00000000000296 F	76.6666666666683 C	349.8166666666683 K
172.500000000003 F	78.05555555555723 C	351.2055555555572 K
175.00000000000304 F	79.44444444444613 C	352.59444444444614 K
177.5000000000031 F	80.83333333333506 C	353.98333333333505 K
180.00000000000315 F	82.22222222222398 C	355.37222222222397 K
182.50000000000318 F	83.61111111111288 C	356.7611111111129 K
185.00000000000324 F	85.0000000000018 C	358.1500000000018 K
187.50000000000327 F	86.3888888888907 C	359.5388888888907 K
190.00000000000333 F	87.77777777777963 C	360.9277777777796 K
192.50000000000338 F	89.16666666666855 C	362.31666666666854 K
195.0000000000034 F	90.55555555555746 C	363.70555555555745 K
197.50000000000347 F	91.94444444444638 C	365.09444444444637 K
200.0000000000035 F	93.33333333333528 C	366.4833333333353 K
202.50000000000355 F	94.7222222222242 C	367.8722222222242 K
205.0000000000036 F	96.11111111111312 C	369.2611111111131 K
207.50000000000364 F	97.50000000000203 C	370.650000000002 K
210.0000000000037 F	98.88888888889095 C	372.03888888889094 K
]0;sp46@gold09: ~/214/projects/08/java[01;32msp46@gold09[00m:[01;34m~/214/projects/08/java[00m$ java TempTester
Enter the start temp value:
Please enter the temperature value with scale: 
0 k
Enter the limit temp value:
Please enter the temperature value with scale: 
212 f
Please enter the increment value: 
20.0
-459.66999999999996 F	-273.15 C	0.0 K
-423.66999999999996 F	-253.14999999999998 C	20.0 K
-387.66999999999996 F	-233.14999999999998 C	40.0 K
-351.66999999999996 F	-213.14999999999998 C	60.0 K
-315.66999999999996 F	-193.14999999999998 C	80.0 K
-279.66999999999996 F	-173.14999999999998 C	100.0 K
-243.66999999999996 F	-153.14999999999998 C	120.0 K
-207.66999999999996 F	-133.14999999999998 C	140.0 K
-171.66999999999996 F	-113.14999999999998 C	160.0 K
-135.66999999999996 F	-93.14999999999998 C	180.0 K
-99.66999999999996 F	-73.14999999999998 C	200.0 K
-63.66999999999996 F	-53.14999999999998 C	220.0 K
-27.66999999999996 F	-33.14999999999998 C	240.0 K
8.330000000000041 F	-13.149999999999977 C	260.0 K
44.33000000000004 F	6.850000000000023 C	280.0 K
80.33000000000004 F	26.850000000000023 C	300.0 K
116.33000000000004 F	46.85000000000002 C	320.0 K
152.33000000000004 F	66.85000000000002 C	340.0 K
188.33000000000004 F	86.85000000000002 C	360.0 K
]0;sp46@gold09: ~/214/projects/08/java[01;32msp46@gold09[00m:[01;34m~/214/projects/08/java[00m$ exit

Script done on 2020-04-14 05:31:38-0400
Script started on 2020-04-14 07:56:12-0400
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ s cat temp_package.ads
-- name_package.ads declares the Name type and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sinai Park (sp46)
-- Date: April 10 2020
--------------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package temp_package is 

  type Temp is private;

  procedure Init(Tm: out Temp;
                 Degrees : in float; Scale : in character);
 
  function getDegree( Tm: in Temp) return float;
  
  function getScale( Tm: in Temp) return character;
 
  procedure setFahrenheit(Tm: out Temp);
  
  procedure setCelsius(Tm: out Temp);

  procedure setKelvin(Tm: out Temp);

  procedure raise_temp(Tm: out Temp; Degrees: in float);

  procedure lower(Tm: out Temp; Degrees: in float);

  function equals(Temp1: in Temp; Temp2: in Temp) return boolean;

  function less_than(Temp1: in Temp; Temp2: in Temp) return boolean;
  
  procedure readTemp(Tm: out Temp);

  procedure printTemp( Tm: in Temp);

 private

  type Temp is
      record
         myDegree: float;
         myScale: character;
      end record;

end temp_package;
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ cat temp_package.adb
-- name_package.adb defines operations for the Name type.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Sinai Park (sp46)
-- Date: April 10 2020
---------------------------------------------------------
with Ada.Text_IO, Ada.Float_Text_IO;
use Ada.Text_IO, Ada.Float_Text_IO;

package body temp_package is 

-- Declare variables to be used later in some of the functions
  start, limit : Temp;
  degree_input : float;
  scale_input : character;
  
  ----------------------------------------------
  -- Init initializes a Temp variable          
  -- Receive: Temp variable;          
  --          scale, in char
  --          Degrees, in string;      
  -- Return: temp, set to degree and scale.     
  ----------------------------------------------

  procedure Init(Tm: out Temp;
                 Degrees : in float; Scale : in character ) is
  begin
    Tm.myDegree := Degrees;
    Tm.myScale := Scale;
  end Init;

  ----------------------------------------------
  -- getDegrees(Temp) retrieves Temp.myDegree        
  -- Receive: Nm, a Name.                      
  -- PRE: Nm has been initialized.            
  -- Return: Nm.myFirst.                     
  ----------------------------------------------
  function getDegree( Tm: in Temp) return float is
  begin
    return Tm.myDegree;
  end getDegree;

  ----------------------------------------------
  -- getScale(Temp) retrieves Scale as a char 
  -- Receive: Tm, a Temp.        
  -- PRE: Tm has been initialized.
  -- Return: Tm.myScale. 
  ----------------------------------------------
  function getScale( Tm: in Temp) return character is
  begin
     return Tm.myScale;
  end getScale;

----------------------------------------------------------------------------
-- setFahrenheit(Temp) sets the current temperature to Fahrenheit
-- Receive: Tm, a Temperature
-- PRE: Tm has been initialized.
-- Output: Tm.myDegree in Fahrenheit
----------------------------------------------------------------------------
procedure setFahrenheit(Tm: out Temp) is
begin
	if Tm.myScale = 'C' or Tm.myScale = 'c' then
		Tm.myDegree := (( Tm.myDegree * (9.0/5.0)) + 32.0 );
		Tm.myScale := 'F';
	elsif ( Tm.myScale = 'K' or Tm.myScale = 'k' ) then
		Tm.myDegree := (( Tm.myDegree * (9.0/5.0)) - 459.67) ;
		Tm.myScale := 'F';
	end if;
end setFahrenheit;

----------------------------------------------------------------------------
-- setCelsius(Temp) sets the current temperature to Celsius
-- Receive: Tm, a Temperature
-- PRE: Tm has been initialized.
-- Output: Tm.myDegree in Celsius
----------------------------------------------------------------------------
procedure setCelsius(Tm: out Temp) is
begin
	if Tm.myScale = 'F' or Tm.myScale = 'F' then
		Tm.myDegree := (( Tm.myDegree - 32.0 ) * (5.0/9.0) );
		Tm.myScale := 'C';
	elsif ( Tm.myScale = 'K' or Tm.myScale = 'k' ) then
		Tm.myDegree := ( Tm.myDegree  - 273.15) ;
		Tm.myScale := 'C';
	end if;
end setCelsius;

----------------------------------------------------------------------------
-- setKelvin(Temp) sets the current temperature to Kelvin
-- Receive: Tm, a Temperature
-- PRE: Tm has been initialized.
-- Output: Tm.myDegree in Kelvin
----------------------------------------------------------------------------
procedure setKelvin(Tm: out Temp) is
begin
	if Tm.myScale = 'F' or Tm.myScale = 'f' then
		Tm.myDegree := (( Tm.myDegree + 459.67) * (5.0/9.0) );
		Tm.myScale := 'K';
	elsif ( Tm.myScale = 'C' or Tm.myScale = 'c' ) then
		Tm.myDegree := ( Tm.myDegree + 273.15 );
		Tm.myScale := 'K';
	end if;
end setKelvin;

---------------------------------------------------------------------
-- raise(Temp, Degrees) raises the current degrees by Degrees
-- Receive: Temp, a Temperature; Degreess, a float
-- Output: Temp.myDegrees raised by Degrees
---------------------------------------------------------------------
procedure raise_temp(Tm: out Temp; Degrees: in float) is
begin
	Tm.myDegree := Tm.myDegree + Degrees;
end raise_temp;

---------------------------------------------------------------------
-- lower(Temp, Degrees) lowers the current degrees by Degrees
-- Receive: Temp, a Temperature; Degrees, a float
-- Output: Temp.myDegrees lowered by Degrees
---------------------------------------------------------------------
procedure lower(Tm: out Temp; Degrees: in float) is
begin
	Tm.myDegree := Tm.myDegree - Degrees;
end lower;


------------------------------------------------------------------
-- equals(Temp1, Temp2) checks if the two Temperatures are equal
-- Receive: Temp1 and Temp2, both Temperatures
-- Return: true if degrees are equal; else false
------------------------------------------------------------------
function equals(Temp1: in Temp; Temp2: in Temp) return boolean is
begin
	Init(start, getDegree(Temp1), getScale(Temp1));
	Init(limit, getDegree(Temp2), getScale(Temp2));

	setFahrenheit(start);
	setFahrenheit(limit);

	if (start.myDegree = limit.myDegree) then
		return true;
	else
		return false;
	end if;

end equals;

------------------------------------------------------------------
-- less_than(Temp1, Temp2) checks if Temp1 is less than Temp2
-- Receive: Temp1 and Temp2, both Temperatures
-- PRE: Temp1 and Temp2 have already been initialized
-- Return: true if Temp1 < Temp2; else return false
------------------------------------------------------------------
function less_than(Temp1: in Temp; Temp2: in Temp) return boolean is
begin
	Init(start, getDegree(Temp1), getScale(Temp1));
	Init(limit, getDegree(Temp2), getScale(Temp2));

	setFahrenheit(start);
	setFahrenheit(limit);

	if start.myDegree < limit.myDegree then
		return true;
	else
		return false;
	end if;

end less_than;

---------------------------------------------------------------------
-- readTemp(Tm) reads in the temperature and scale from the user
-- Receive: Tm, a Temperature
-- PRE: Temp has already been initialized
-- Output: Temp has new myDegrees and myScale values
---------------------------------------------------------------------
procedure readTemp(Tm: out Temp) is
begin
	New_Line;
	Put("Please enter the temperature: ");
	Get(degree_input);
	Put("Please enter the scale: ");
	Get(scale_input);

	
		Tm.myDegree := 	degree_input;
		Tm.myScale := scale_input;
	
end readTemp;

  ----------------------------------------------
  -- printTemp(Temp) displays a Temp value.          -
  -- PRE: Tm has been initialized.             -
  -- Receive: Tm, a Temp.                      -
  -- Output: a String representation of Tm                -
  ----------------------------------------------
  procedure printTemp( Tm: in Temp) is
  begin
    Put( Tm.myDegree );
	Put(" ") ;
	Put( Tm.myScale );
  end printTemp;


end temp_package; 
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ cat temperature.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Sinai Park (sp46)
-- Date: March 31 2020
----------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO, temp_package;
use Ada.Text_IO, Ada.Float_Text_IO, temp_package;

procedure temperature is

   -- Declaring variables to be used later in the table test procedure
	start_Temp, end_temp : temp_package.Temp;
	increment_num : float;
	temp_scale : character;

begin
	-- Prompt the user for the starting temperature
	Put("Starting Temperature");
	readTemp(start_Temp);

	-- Prompt the user for the ending temperature
	Put("Ending Temperature");
	readTemp(end_temp);

	-- Prompt the user for the increment value
	Put("Please enter the increment value: ");
	Get(increment_num);

	temp_scale := getScale(start_temp);

	-- While loop to print out the temperature values in a table format in each scale
	while ( less_than(start_temp, end_temp) or equals(start_temp, end_temp) ) loop

		-- First print out the Fahrenheit degrees
		setFahrenheit(start_temp);
		printTemp(start_temp);
		Put("     ");

		-- Second print out the Celsius degrees
		setCelsius(start_temp);
		printTemp(start_temp);
		Put("     ");
		
		-- Third print out the Celsius degrees
		setKelvin(start_temp);
		printTemp(start_temp);
		New_Line;

		-- Determine what the start_temp Scale was to return it back to that Scale
		if ( temp_scale = 'F' or temp_scale = 'f' ) then
			setFahrenheit(start_temp);
		elsif ( temp_scale = 'K' or temp_scale = 'k' ) then
			setKelvin(start_temp);
		elsif ( temp_scale = 'C' or temp_scale = 'c' ) then
			setCelsius(start_temp);
		end if;
	
		-- Increment the start_temp by increment
		raise_temp(start_temp, increment_num );

	end loop;

end temperature;
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ gnam tmake temperature
gnatmake: "temperature" up to date.
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ gnatmake temp_package
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ gnatmake temp_package[1Perature[1Pcat temperature.adb[1@_package.adbs[7P./temperature[7Pcd ada./temperature
Starting Temperature
Please enter the temperature: 0
Please enter the scale: f
Ending Temperature
Please enter the temperature: 100
Please enter the scale: c
Please enter the increment value: 2.5
 0.00000E+00 f      0.00000E+00 f      2.55372E+02 K
 2.50000E+00 F     -1.63889E+01 C      2.56761E+02 K
 4.99997E+00 F     -1.50000E+01 C      2.58150E+02 K
 7.49991E+00 F     -1.36112E+01 C      2.59539E+02 K
 9.99985E+00 F     -1.22223E+01 C      2.60928E+02 K
 1.24998E+01 F     -1.08335E+01 C      2.62317E+02 K
 1.49997E+01 F     -9.44460E+00 C      2.63705E+02 K
 1.74997E+01 F     -8.05574E+00 C      2.65094E+02 K
 1.99996E+01 F     -6.66689E+00 C      2.66483E+02 K
 2.24995E+01 F     -5.27803E+00 C      2.67872E+02 K
 2.49995E+01 F     -3.88918E+00 C      2.69261E+02 K
 2.74994E+01 F     -2.50032E+00 C      2.70650E+02 K
 2.99994E+01 F     -1.11147E+00 C      2.72039E+02 K
 3.24993E+01 F      2.77388E-01 C      2.73427E+02 K
 3.49992E+01 F      1.66624E+00 C      2.74816E+02 K
 3.74992E+01 F      3.05510E+00 C      2.76205E+02 K
 3.99991E+01 F      4.44395E+00 C      2.77594E+02 K
 4.24991E+01 F      5.83281E+00 C      2.78983E+02 K
 4.49990E+01 F      7.22166E+00 C      2.80372E+02 K
 4.74989E+01 F      8.61052E+00 C      2.81760E+02 K
 4.99989E+01 F      9.99937E+00 C      2.83149E+02 K
 5.24988E+01 F      1.13882E+01 C      2.84538E+02 K
 5.49987E+01 F      1.27771E+01 C      2.85927E+02 K
 5.74987E+01 F      1.41659E+01 C      2.87316E+02 K
 5.99986E+01 F      1.55548E+01 C      2.88705E+02 K
 6.24986E+01 F      1.69436E+01 C      2.90094E+02 K
 6.49985E+01 F      1.83325E+01 C      2.91482E+02 K
 6.74984E+01 F      1.97214E+01 C      2.92871E+02 K
 6.99984E+01 F      2.11102E+01 C      2.94260E+02 K
 7.24983E+01 F      2.24991E+01 C      2.95649E+02 K
 7.49983E+01 F      2.38879E+01 C      2.97038E+02 K
 7.74982E+01 F      2.52768E+01 C      2.98427E+02 K
 7.99981E+01 F      2.66656E+01 C      2.99816E+02 K
 8.24981E+01 F      2.80545E+01 C      3.01204E+02 K
 8.49980E+01 F      2.94433E+01 C      3.02593E+02 K
 8.74980E+01 F      3.08322E+01 C      3.03982E+02 K
 8.99979E+01 F      3.22211E+01 C      3.05371E+02 K
 9.24978E+01 F      3.36099E+01 C      3.06760E+02 K
 9.49978E+01 F      3.49988E+01 C      3.08149E+02 K
 9.74977E+01 F      3.63876E+01 C      3.09538E+02 K
 9.99977E+01 F      3.77765E+01 C      3.10926E+02 K
 1.02498E+02 F      3.91653E+01 C      3.12315E+02 K
 1.04998E+02 F      4.05542E+01 C      3.13704E+02 K
 1.07497E+02 F      4.19430E+01 C      3.15093E+02 K
 1.09997E+02 F      4.33319E+01 C      3.16482E+02 K
 1.12497E+02 F      4.47207E+01 C      3.17871E+02 K
 1.14997E+02 F      4.61096E+01 C      3.19260E+02 K
 1.17497E+02 F      4.74985E+01 C      3.20648E+02 K
 1.19997E+02 F      4.88873E+01 C      3.22037E+02 K
 1.22497E+02 F      5.02762E+01 C      3.23426E+02 K
 1.24997E+02 F      5.16650E+01 C      3.24815E+02 K
 1.27497E+02 F      5.30539E+01 C      3.26204E+02 K
 1.29997E+02 F      5.44427E+01 C      3.27593E+02 K
 1.32497E+02 F      5.58316E+01 C      3.28982E+02 K
 1.34997E+02 F      5.72204E+01 C      3.30370E+02 K
 1.37497E+02 F      5.86093E+01 C      3.31759E+02 K
 1.39997E+02 F      5.99982E+01 C      3.33148E+02 K
 1.42497E+02 F      6.13870E+01 C      3.34537E+02 K
 1.44997E+02 F      6.27759E+01 C      3.35926E+02 K
 1.47496E+02 F      6.41647E+01 C      3.37315E+02 K
 1.49996E+02 F      6.55536E+01 C      3.38704E+02 K
 1.52496E+02 F      6.69424E+01 C      3.40092E+02 K
 1.54996E+02 F      6.83313E+01 C      3.41481E+02 K
 1.57496E+02 F      6.97201E+01 C      3.42870E+02 K
 1.59996E+02 F      7.11090E+01 C      3.44259E+02 K
 1.62496E+02 F      7.24978E+01 C      3.45648E+02 K
 1.64996E+02 F      7.38867E+01 C      3.47037E+02 K
 1.67496E+02 F      7.52756E+01 C      3.48426E+02 K
 1.69996E+02 F      7.66644E+01 C      3.49814E+02 K
 1.72496E+02 F      7.80533E+01 C      3.51203E+02 K
 1.74996E+02 F      7.94421E+01 C      3.52592E+02 K
 1.77496E+02 F      8.08310E+01 C      3.53981E+02 K
 1.79996E+02 F      8.22198E+01 C      3.55370E+02 K
 1.82496E+02 F      8.36087E+01 C      3.56759E+02 K
 1.84996E+02 F      8.49975E+01 C      3.58148E+02 K
 1.87496E+02 F      8.63864E+01 C      3.59536E+02 K
 1.89995E+02 F      8.77753E+01 C      3.60925E+02 K
 1.92495E+02 F      8.91641E+01 C      3.62314E+02 K
 1.94995E+02 F      9.05530E+01 C      3.63703E+02 K
 1.97495E+02 F      9.19418E+01 C      3.65092E+02 K
 1.99995E+02 F      9.33307E+01 C      3.66481E+02 K
 2.02495E+02 F      9.47195E+01 C      3.67870E+02 K
 2.04995E+02 F      9.61084E+01 C      3.69258E+02 K
 2.07495E+02 F      9.74972E+01 C      3.70647E+02 K
 2.09995E+02 F      9.88861E+01 C      3.72036E+02 K
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ 0 A./temperature
Starting Temperature
Please enter the temperature: 0
Please enter the scale: k
Ending Temperature
Please enter the temperature: 212
Please enter the scale: f
Please enter the increment value: 20.0
-4.59670E+02 F     -2.73150E+02 C     -3.05176E-05 K
-4.23670E+02 F     -2.53150E+02 C      1.99999E+01 K
-3.87670E+02 F     -2.33150E+02 C      3.99999E+01 K
-3.51670E+02 F     -2.13150E+02 C      5.99999E+01 K
-3.15670E+02 F     -1.93150E+02 C      7.99999E+01 K
-2.79670E+02 F     -1.73150E+02 C      9.99998E+01 K
-2.43670E+02 F     -1.53150E+02 C      1.20000E+02 K
-2.07670E+02 F     -1.33150E+02 C      1.40000E+02 K
-1.71670E+02 F     -1.13150E+02 C      1.60000E+02 K
-1.35670E+02 F     -9.31503E+01 C      1.80000E+02 K
-9.96705E+01 F     -7.31503E+01 C      2.00000E+02 K
-6.36706E+01 F     -5.31503E+01 C      2.20000E+02 K
-2.76706E+01 F     -3.31503E+01 C      2.40000E+02 K
 8.32938E+00 F     -1.31503E+01 C      2.60000E+02 K
 4.43293E+01 F      6.84962E+00 C      2.80000E+02 K
 8.03293E+01 F      2.68496E+01 C      3.00000E+02 K
 1.16329E+02 F      4.68496E+01 C      3.20000E+02 K
 1.52329E+02 F      6.68495E+01 C      3.40000E+02 K
 1.88329E+02 F      8.68495E+01 C      3.59999E+02 K
]0;sp46@gold09: ~/214/projects/08/ada[01;32msp46@gold09[00m:[01;34m~/214/projects/08/ada[00m$ exit

Script done on 2020-04-14 07:57:22-0400
Script started on 2020-04-16 02:48:04-0400
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ cd src
]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ ls
Temp.clj  tempTester.clj
]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cat Temp.clj
;; Temp.clj is a module for our 'Temp' type-abstraction.
;;
;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;; Completed by: Sinai Park (sp46)
;; Date: April 15 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create a record/struct type named Temp
(defrecord Temp [degree, scale])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-Temp constructs a Temp object from 
;; degree, a string and scale, a char 
;; Receive: degree and scale
;; Return: the Temp (degree and scale). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Temp [degree scale]
  (->Temp degree scale)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getDegrees extracts the degrees of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees double in aTemp.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getDegree [aTemp]
  (:degree aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; getScale extracts the scale of a temp object.
;; Receive: aTemp, a Temp
;; Return: the scale char in aTemp.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScale [aTemp]
  (:scale aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toFarenheit extracts the degrees of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees in Fahrenheit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toFahrenheit [aTemp]
  (if (or (=(:scale aTemp) "C") (=(:scale aTemp) "c"))
    (do
      (let [degree_val (+ ( * (:degree aTemp) (/ 9.0 5.0)) 32.0) ]
      (let [scale_char ("F")]
      (->Temp degree_val scale_char)
  (if (or (=(:scale aTemp) "K") (=(:scale aTemp) "k"))
    (do
      (let [degree_val (- ( * (getDegree aTemp) (/ 9.0 5.0)) 459.67) ]
      (let [scale_char ("F")]
      (->Temp degree_val scale_char)))))))))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toCelcius extracts the scale of a temp object.
;; Receive: aTemp, a Temp. 
;; Return: the degrees in Celsius
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toCelsius [aTemp]
  (:scales aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toKelvin extracts the scale of a temp object.
;; Receive: aTemp, a Temp
;; Return: the degrees in Kelvin
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toKelvin [aTemp]
  (:scales aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readTemp() creates a temp from user input. 
;;; Receive: aTemp, a Temp 
;;; Return: none 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn readTemp[^Temp aTemp]
  (print "Please enter the degree name: ") (flush)
  (let
    [degree (read-line)]
      (print "Please enter the scale: ") (flush)
      (let
        [ scale (read-line)]
          (->Temp degree scale)
          
      )
  )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; printTemp displays a temp object. 
;; Receive: aTemp, a Temp, 
;; Output: the string representation of aTemp. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printTemp[aTemp]
  (print (getDegree aTemp) "" (getScale aTemp))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() changes the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the changed firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn raise[aTemp add_degree]
  (->Temp (+ (:degree aTemp) add_degree) (:scale aTemp) )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() changes the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn lower[aTemp sub_degree]
  (->Temp (- (:degree aTemp) sub_degree) (:scale aTemp) )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() changes the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn equals[aTemp comp_temp]
  (:degree aTemp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; less_than() returns a full name in L-F-M order. 
;;; Receive: aName, a Name. 
;;; Return: lastName, firstName, middleName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn less_than[aTemp comp_temp]
  (:degree aTemp)
)]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cat TempTester.clj                  cat tempTester.clj
;;;; tempTester.clj tests a clojure Temp type.
;;;;
;;;; Output: results of testing Temp functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Sinai Park (sp46)
;;;; Date: April 1 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns tempTester)   ; program name

(load "Temp")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Temp functions. 
;;; Output: the result of testing our Temp functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
       start_temp (make-Temp 30.0 "F")  ; -using our "make-" constructor
       limit_temp (->Temp 30.0 "F" ) ; -invoking constructor directly                                                   
       name3 (map->Temp {:degrees 30.0 :scale "Jinx"}) ; -mapping field-names to values; 
    ]
    (printTemp start_temp) (println)
    (println "Starting Temperature ")
    (let 
      [start_temp (readTemp start_temp)]
    (println "Limiting Temperature ") 
    (let 
      [limit_temp (readTemp limit_temp)]
    (println "Enter the increment number: ") 
    (let 
      [increment (read)]


      ;First print out the Fahrenheit degrees
      (toFahrenheit start_temp)
      (printTemp start_temp)
      (print "\t")
  
      ;Second print out the Celsius degrees
      (toCelsius start_temp)
      (printTemp start_temp)
      (print "\t")
  
      ;Third print out the Kelvin degrees
      (toKelvin start_temp)
      (printTemp start_temp)
      (println "")

    ))) ;three let definitions
    (println "\nAll tests passed!")

  )
)

]0;sp46@gold06: ~/214/projects/08/clojure/src[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure/src[00m$ cd -
/home/sp46/214/projects/08/clojure
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ clojure -m tempTester
30.0  F
Starting Temperature 
Please enter the degree name: 0
Please enter the scale: f
Limiting Temperature 
Please enter the degree name: 100
Please enter the scale: c
Enter the increment number: 
2.5
0  f	0  f	0  f

All tests passed!
]0;sp46@gold06: ~/214/projects/08/clojure[01;32msp46@gold06[00m:[01;34m~/214/projects/08/clojure[00m$ exit

Script done on 2020-04-16 02:48:50-0400
Script started on 2020-04-15 04:56:56-0400
]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ cat Temperature.rb
# Temperature.rb tests class Temp and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sinai Park (sp46)
# Date: April 15 2020
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

#wrap class Temperature around the module
module Temperatures 

  class Temperature

   def initialize(degree_val, scale_unit)
     @degrees, @scales = degree_val, scale_unit
   end

   #shortcut function of all the "getter" functions
   attr_reader :degrees, :scales

   #function to_farenheit() to return the temp to f
   def to_fahrenheit()
      if (@scales == "c" or @scales == "C") then
         @degrees = ((@degrees * (9.0/5.0)) + 32.0)
         @scales = "F"
      elsif (@scales == "K" or @scales == "k") then
         @degrees = ((@degrees - 273.15) * (9.0/5.0) + 32.0)
         @scales = "F"
      end 
   end

   #function to_celcius() to return the temp to c
   def to_celcius()
      if (@scales == "K" or @scales == "k") then
         @degrees = (@degrees - 273.15)
         @scales = "C"
      elsif (@scales == "f" or @scales == "F") then
         @degrees = ((@degrees - 32.0) * (5.0/9.0))
         @scales = "C"
      end
   end   
   
   #function to_kalvin() to return the temp to k
   def to_kelvin()
      if (@scales == "c" or @scales == "C") then
         @degrees = (@degrees + 273.15)
         @scales = "K"
      elsif (@scales == "f" or @scales == "F") then
         @degrees = ((@degrees - 32.0) * (5.0/9.0) + 273.15)
         @scales = "K"
      end
   end
   
   #function raise() to raise temp by the number of degrees of temp
   def raise_temp(degree)
      @degrees = @degrees + degree
   end

   #function lower() to lower by the number of degress received 
   def lower(degree)
      @degrees = @degrees - degree
 
   end

   #function equals() determines if the temp on the righthand and lefthand are equal (scales do not matter)
   def equals(other)
      temp_scale = @scales
      other.to_fahrenheit
      to_fahrenheit
     
      if (@degrees == other.degrees) then
         if (temp_scale == "C" or temp_scale == "C") then
            to_celcius
         elsif (temp_scale == "K" or temp_scale == "k") then
            to_kelvin
         end 
         return true
      else
         return false
      end
   end

   #function less_than() to compare if the degrees of temp is lower than that of the other
   def less_than(other)
      temp_scale = @scales
      other.to_fahrenheit
      to_fahrenheit
     
      if (@degrees < other.degrees) then
         if (temp_scale == "C" or temp_scale == "c") then
            to_celcius
         elsif (temp_scale == "K" or temp_scale == "k") then
            to_kelvin
         end 
         return true
      else
         return false
      end
   end

   #function readTemp() uses user input to update degrees and scales
   def readTemp()
      puts ("Please enter the temperature with scale: ")
      string = gets.chomp
      #split the string into an array
      string_array = string.split(" ")
      degree_input = string_array[0].to_f
      scale_input = string_array[1]

      @degrees = degree_input
      @scales = scale_input
   end

   #function printTemp() prints the current degrees and scales
   def printTemp()
      print (@degrees.to_s + " " + @scales.to_s)
   end

   end
end]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ cat testTemp.rb
# nameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Sinai Park (sp46)
# Date: April 10 2020
####################################################

require 'test/unit/assertions'
require './Temperature'
include Test::Unit::Assertions

def testTemp
   #initialize the starting and ending temperatures
   start = Temperatures::Temperature.new(30.0, 'F')
   limit = Temperatures::Temperature.new(30.0, 'F')
   puts("Starting Temperature")
   start.readTemp

   puts("Limiting Temperature")
   limit.readTemp

   puts ("Please enter the increment value: ")
   increment = gets.chomp.to_f
   starting_scale = start.scales

   # While loop to print out the temperature values in a table for each scale
	while start.less_than(limit) do
		
		# First print out the Fahrenheit degrees
		start.to_fahrenheit
		start.printTemp
		print("\t")

		# Second print out the Celsius degrees
		start.to_celcius
		start.printTemp
		print("\t")

		# Third print out the Kelvin degrees
		start.to_kelvin
		start.printTemp
		
		puts ("")
		# Determine the start scale to return it to its original format
		if ( starting_scale == 'F' or starting_scale == 'f' ) then
			start.to_fahrenheit
		elsif ( starting_scale == 'K' or starting_scale == 'k' ) then
			start.to_kelvin
		elsif ( starting_scale == 'C' or starting_scale == 'c' ) then
			start.to_celcius
		end

		# Increment the start
      start.raise_temp(increment)
    
	end
end

testTemp
]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ cat testTemp.rb[3@Temperature.rb[3PtestTemp.rb[3@Temperature.rb[2Pruby testTemp.rb[3@Temperature.rb
]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ ruby Temperature.rb[4Pcat testTemp.rb[3@Temperature.rb[3PtestTemp.rb[3@Temperature.rb[2Pruby testTemp.rb
Starting Temperature
Please enter the temperature with scale: 
0 f
Limiting Temperature
Please enter the temperature with scale: 
100 c
Please enter the increment value: 
2.5
0.0 f	-17.77777777777778 C	255.3722222222222 K
2.5000000000000107 F	-16.388888888888882 C	256.7611111111111 K
5.000000000000057 F	-14.99999999999997 C	258.15000000000003 K
7.500000000000103 F	-13.611111111111054 C	259.53888888888895 K
10.000000000000146 F	-12.222222222222141 C	260.92777777777786 K
12.500000000000192 F	-10.833333333333227 C	262.3166666666668 K
15.000000000000238 F	-9.444444444444313 C	263.7055555555557 K
17.500000000000284 F	-8.055555555555397 C	265.0944444444446 K
20.000000000000327 F	-6.666666666666486 C	266.4833333333335 K
22.500000000000377 F	-5.277777777777569 C	267.87222222222243 K
25.00000000000042 F	-3.888888888888656 C	269.26111111111135 K
27.500000000000465 F	-2.4999999999997415 C	270.65000000000026 K
30.00000000000051 F	-1.111111111110827 C	272.0388888888892 K
32.500000000000554 F	0.2777777777780857 C	273.4277777777781 K
35.000000000000604 F	1.6666666666670023 C	274.816666666667 K
37.50000000000065 F	3.055555555555915 C	276.2055555555559 K
40.000000000000696 F	4.444444444444832 C	277.59444444444483 K
42.50000000000074 F	5.833333333333744 C	278.98333333333375 K
45.00000000000078 F	7.222222222222657 C	280.37222222222266 K
47.50000000000083 F	8.611111111111573 C	281.7611111111116 K
50.000000000000874 F	10.000000000000487 C	283.1500000000005 K
52.500000000000924 F	11.388888888889403 C	284.5388888888894 K
55.000000000000966 F	12.777777777778315 C	285.9277777777783 K
57.50000000000101 F	14.166666666667227 C	287.31666666666723 K
60.00000000000106 F	15.555555555556145 C	288.70555555555615 K
62.50000000000111 F	16.94444444444506 C	290.09444444444506 K
65.00000000000115 F	18.333333333333975 C	291.483333333334 K
67.5000000000012 F	19.722222222222886 C	292.8722222222229 K
70.00000000000125 F	21.111111111111807 C	294.2611111111118 K
72.50000000000128 F	22.50000000000071 C	295.65000000000066 K
75.00000000000122 F	23.888888888889568 C	297.0388888888896 K
77.50000000000128 F	25.27777777777849 C	298.4277777777785 K
80.00000000000132 F	26.666666666667403 C	299.8166666666674 K
82.50000000000136 F	28.055555555556314 C	301.2055555555563 K
85.00000000000142 F	29.444444444445235 C	302.59444444444523 K
87.50000000000145 F	30.83333333333414 C	303.98333333333414 K
90.0000000000015 F	32.22222222222306 C	305.37222222222306 K
92.50000000000155 F	33.611111111111974 C	306.761111111112 K
95.00000000000159 F	35.00000000000089 C	308.1500000000009 K
97.50000000000165 F	36.38888888888981 C	309.5388888888898 K
100.00000000000169 F	37.77777777777872 C	310.9277777777787 K
102.50000000000173 F	39.16666666666763 C	312.31666666666763 K
105.00000000000178 F	40.555555555556545 C	313.70555555555654 K
107.50000000000182 F	41.94444444444546 C	315.09444444444546 K
110.00000000000186 F	43.333333333334366 C	316.4833333333344 K
112.50000000000192 F	44.72222222222329 C	317.8722222222233 K
115.00000000000196 F	46.1111111111122 C	319.2611111111122 K
117.500000000002 F	47.500000000001116 C	320.6500000000011 K
120.00000000000205 F	48.88888888889003 C	322.03888888889 K
122.50000000000209 F	50.277777777778944 C	323.42777777777894 K
125.00000000000215 F	51.66666666666786 C	324.81666666666786 K
127.50000000000219 F	53.05555555555677 C	326.20555555555677 K
130.00000000000222 F	54.44444444444568 C	327.5944444444457 K
132.50000000000227 F	55.8333333333346 C	328.9833333333346 K
135.00000000000233 F	57.22222222222352 C	330.3722222222235 K
137.5000000000024 F	58.61111111111244 C	331.7611111111124 K
140.00000000000242 F	60.00000000000134 C	333.15000000000134 K
142.50000000000244 F	61.38888888889025 C	334.53888888889026 K
145.0000000000025 F	62.77777777777917 C	335.92777777777917 K
147.50000000000256 F	64.16666666666809 C	337.3166666666681 K
150.00000000000261 F	65.555555555557 C	338.705555555557 K
152.50000000000264 F	66.94444444444592 C	340.0944444444459 K
155.00000000000267 F	68.33333333333482 C	341.4833333333348 K
157.50000000000273 F	69.72222222222373 C	342.87222222222374 K
160.00000000000279 F	71.11111111111266 C	344.26111111111265 K
162.5000000000028 F	72.50000000000156 C	345.65000000000157 K
165.00000000000287 F	73.88888888889049 C	347.0388888888905 K
167.50000000000293 F	75.2777777777794 C	348.4277777777794 K
170.00000000000296 F	76.6666666666683 C	349.8166666666683 K
172.500000000003 F	78.05555555555723 C	351.2055555555572 K
175.00000000000304 F	79.44444444444613 C	352.59444444444614 K
177.5000000000031 F	80.83333333333506 C	353.98333333333505 K
180.00000000000315 F	82.22222222222398 C	355.37222222222397 K
182.50000000000318 F	83.61111111111288 C	356.7611111111129 K
185.00000000000324 F	85.0000000000018 C	358.1500000000018 K
187.50000000000327 F	86.3888888888907 C	359.5388888888907 K
190.00000000000333 F	87.77777777777963 C	360.9277777777796 K
192.50000000000338 F	89.16666666666855 C	362.31666666666854 K
195.0000000000034 F	90.55555555555746 C	363.70555555555745 K
197.50000000000347 F	91.94444444444638 C	365.09444444444637 K
200.0000000000035 F	93.33333333333528 C	366.4833333333353 K
202.50000000000355 F	94.7222222222242 C	367.8722222222242 K
205.0000000000036 F	96.11111111111312 C	369.2611111111131 K
207.50000000000364 F	97.50000000000203 C	370.650000000002 K
210.0000000000037 F	98.88888888889095 C	372.03888888889094 K
]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ ruby testTemp.rb
Starting Temperature
Please enter the temperature with scale: 
0 k
Limiting Temperature
Please enter the temperature with scale: 
212 f
Please enter the increment value: 
20.0
-459.66999999999996 F	-273.15 C	0.0 K
-423.66999999999996 F	-253.14999999999998 C	20.0 K
-387.66999999999996 F	-233.14999999999998 C	40.0 K
-351.66999999999996 F	-213.14999999999998 C	60.0 K
-315.66999999999996 F	-193.14999999999998 C	80.0 K
-279.66999999999996 F	-173.14999999999998 C	100.0 K
-243.66999999999996 F	-153.14999999999998 C	120.0 K
-207.66999999999996 F	-133.14999999999998 C	140.0 K
-171.66999999999996 F	-113.14999999999998 C	160.0 K
-135.66999999999996 F	-93.14999999999998 C	180.0 K
-99.66999999999996 F	-73.14999999999998 C	200.0 K
-63.66999999999996 F	-53.14999999999998 C	220.0 K
-27.66999999999996 F	-33.14999999999998 C	240.0 K
8.330000000000041 F	-13.149999999999977 C	260.0 K
44.33000000000004 F	6.850000000000023 C	280.0 K
80.33000000000004 F	26.850000000000023 C	300.0 K
116.33000000000004 F	46.85000000000002 C	320.0 K
152.33000000000004 F	66.85000000000002 C	340.0 K
188.33000000000004 F	86.85000000000002 C	360.0 K
]0;sp46@gold06: ~/214/projects/08/ruby[01;32msp46@gold06[00m:[01;34m~/214/projects/08/ruby[00m$ exit

Script done on 2020-04-15 04:57:51-0400
